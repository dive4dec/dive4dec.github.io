{"version":3,"file":"lib_index_js.31d9d7eba1ba490fac58.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACwE;AACrB;AACK;AACE;AACA;AAC1D;AACA;AACA;AACA,eAAe,6DAAY,EAAE,kFAAiC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0EAAM;AACxC,kCAAkC,0EAAM;AACxC;AACA,aAAa;AACb;AACA,2BAA2B,iEAAgB;AAC3C;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;AClCvB;AACA;AACA;AAC+B;AACY;AACS;AACD;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAM;AACnC,oCAAoC,8DAAe;AACnD;AACA;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA,0CAA0C,yGAA8B;AACxE,kBAAkB,SAAQ;AAC1B,SAAS;AACT;AACA;AACA;AACA,uBAAuB,6CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8DAAe;AACvD;AACA,4CAA4C,0BAA0B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,wEAAqB;AAC/E;AACA;AACA;AACA;;;;;;;;;;;;;;;AClJA,iEAAe,qBAAuB,yEAAyE;;;;;;;;;;;;;;ACA/G,iEAAe,qBAAuB,yEAAyE","sources":["webpack://@jupyterlite/xeus-python-kernel/./lib/index.js","webpack://@jupyterlite/xeus-python-kernel/./lib/xeus_server_kernel.js","webpack://@jupyterlite/xeus-python-kernel/./style/logos/python-logo-32x32.png","webpack://@jupyterlite/xeus-python-kernel/./style/logos/python-logo-64x64.png"],"sourcesContent":["// Copyright (c) Thorsten Beier\n// Copyright (c) JupyterLite Contributors\n// Distributed under the terms of the Modified BSD License.\nimport { IServiceWorkerRegistrationWrapper } from '@jupyterlite/server';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { XeusServerKernel } from './xeus_server_kernel';\nimport logo32 from '../style/logos/python-logo-32x32.png';\nimport logo64 from '../style/logos/python-logo-64x64.png';\nconst server_kernel = {\n    id: '@jupyterlite/xeus-python-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs, IServiceWorkerRegistrationWrapper],\n    activate: (app, kernelspecs, serviceWorkerRegistrationWrapper) => {\n        kernelspecs.register({\n            spec: {\n                name: 'xeus-python',\n                display_name: 'Python (XPython)',\n                language: 'python',\n                argv: [],\n                resources: {\n                    'logo-32x32': logo32,\n                    'logo-64x64': logo64\n                }\n            },\n            create: async (options) => {\n                return new XeusServerKernel({\n                    ...options,\n                    mountDrive: serviceWorkerRegistrationWrapper.enabled\n                });\n            }\n        });\n    }\n};\nconst plugins = [server_kernel];\nexport default plugins;\n","// Copyright (c) Thorsten Beier\n// Copyright (c) JupyterLite Contributors\n// Distributed under the terms of the Modified BSD License.\nimport { wrap } from 'comlink';\nimport { Signal } from '@lumino/signaling';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nexport class XeusServerKernel {\n    /**\n     * Instantiate a new XeusServerKernel\n     *\n     * @param options The instantiation options for a new XeusServerKernel\n     */\n    constructor(options) {\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._executeDelegate = new PromiseDelegate();\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, sendMessage, location } = options;\n        this._id = id;\n        this._name = name;\n        this._location = location;\n        this._sendMessage = sendMessage;\n        this._worker = new Worker(new URL('./worker.js', import.meta.url), {\n            type: 'module'\n        });\n        this._worker.onmessage = e => {\n            this._processWorkerMessage(e.data);\n        };\n        this._remote = wrap(this._worker);\n        this.initFileSystem(options);\n    }\n    async handleMessage(msg) {\n        this._parent = msg;\n        this._parentHeader = msg.header;\n        await this._sendMessageToWorker(msg);\n    }\n    async _sendMessageToWorker(msg) {\n        // TODO Remove this??\n        if (msg.header.msg_type !== 'input_reply') {\n            this._executeDelegate = new PromiseDelegate();\n        }\n        await this._remote.processMessage({ msg, parent: this.parent });\n        if (msg.header.msg_type !== 'input_reply') {\n            return await this._executeDelegate.promise;\n        }\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimick ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Get the kernel location\n     */\n    get location() {\n        return this._location;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d;\n        if (!msg.header) {\n            return;\n        }\n        msg.header.session = (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '';\n        msg.session = (_d = (_c = this._parentHeader) === null || _c === void 0 ? void 0 : _c.session) !== null && _d !== void 0 ? _d : '';\n        this._sendMessage(msg);\n        // resolve promise\n        if (msg.header.msg_type === 'status' &&\n            msg.content.execution_state === 'idle') {\n            this._executeDelegate.resolve();\n        }\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._worker.terminate();\n        this._worker = null;\n        this._remote = null;\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    async initFileSystem(options) {\n        let driveName;\n        let localPath;\n        if (options.location.includes(':')) {\n            const parts = options.location.split(':');\n            driveName = parts[0];\n            localPath = parts[1];\n        }\n        else {\n            driveName = '';\n            localPath = options.location;\n        }\n        await this._remote.ready();\n        if (options.mountDrive) {\n            await this._remote.mount(driveName, '/drive', PageConfig.getBaseUrl());\n            await this._remote.cd(localPath);\n        }\n    }\n}\n","export default __webpack_public_path__ + \"e32b5c282072d717887b60da73178fdd35a65dc3caeacba7a026e5a4255cc997.png\";","export default __webpack_public_path__ + \"5c9063b436cedf0567480fe487ece0d1479ea9545f310cba93fa184ccbab290d.png\";"],"names":[],"sourceRoot":""}